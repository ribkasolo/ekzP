БИЛЕТ 8 (БИЛЕТ 10 +- ТАКОЙ ЖЕ MONTH(GETDATE())

-- Создание таблицы "Клиенты_месяца" (если она не создана)
CREATE TABLE Клиенты_месяца (
    Код_клиента INT PRIMARY KEY,
    название NVARCHAR(50)
);

-- Объявляем переменную для хранения текущего года
DECLARE @CurrentYear INT = YEAR(GETDATE());

-- Заполнение таблицы "Клиенты_месяца"
INSERT INTO Клиенты_месяца (Код_клиента, название)
SELECT DISTINCT Клиенты.Код_клиента, Клиенты.Название
FROM Клиенты
INNER JOIN Заказы ON Заказы.Клиент = Клиенты.Код_клиента
WHERE MONTH(Заказы.ДатаРазмещения) = 4  -- Фильтруем заказы за апрель
  AND YEAR(Заказы.ДатаРазмещения) = @CurrentYear; -- Фильтруем заказы за текущий год

-----------------------------------------
БИЛЕТ 9

UPDATE телефоны
SET телефон='89137895465'
--FROM сотрудники JOIN телефоны ON телефон.сотрудник=сотрудники.Код_сотрудника
WHERE сотрудник =  11 
-----------------------------------------
БИЛЕТ 11

DECLARE @КодСотрудника INT;
SELECT @КодСотрудника = Код_сотрудника
FROM сотрудники
WHERE Фамилия = N'Долгих';  -- Используйте N'Долгих' для корректной работы с кириллицей

-- Получаем Код_типа для рабочего телефона
DECLARE @КодТипаРабочий INT;
SELECT @КодТипаРабочий = Код_типа 
FROM тип_тел 
WHERE тип = N'рабочий'; -- Используйте N'Рабочий' для корректной работы с кириллицей

-- Удаляем все телефоны сотрудника, кроме рабочего
DELETE FROM телефоны
WHERE сотрудник = @КодСотрудника AND NOT тип <> @КодТипаРабочий;

---------------------------------------------
БИЛЕТ 12 

CREATE PROCEDURE ДетиСотрудников
AS
BEGIN
    -- Выбор информации о детях сотрудников
    SELECT 
        дети.Код_ребенка,
        дети.Фамилия,
        дети.Имя,
        дети.дата_рожд,
        сотрудники.Код_сотрудника,
        сотрудники.Фамилия + ' ' + сотрудники.Имя + ' ' + сотрудники.Отчество AS Сотрудник
    FROM дети
    INNER JOIN сотрудники ON дети.сотрудник = сотрудники.Код_сотрудника;
END;

 EXEC ДетиСотрудников;

-------------------------------------------------
БИЛЕТ 13

CREATE PROCEDURE ДетиСотрудника
    @Код_сотрудника INT
AS
BEGIN
    SELECT Код_ребенка, Фамилия, Имя
    FROM дети
    WHERE сотрудник = @Код_сотрудника;
END;

--Вызов процедуры
EXEC ДетиСотрудника @Код_сотрудника = 2;

-------------------------------------------------

БИЛЕТ 14

CREATE FUNCTION KolTov()
RETURNS INT
AS
BEGIN
    DECLARE @TotalQuantity INT;

    SELECT @TotalQuantity = SUM(Заказы.код_товара) --здесь должно быть количество но оно там nchar
    FROM Заказы
    INNER JOIN Товары ON Заказы.Код_товара = Товары.Код_товара
    WHERE Товары.Наименование = 'Кока-кола';

    RETURN COALESCE(@TotalQuantity, 0);
END;

SELECT dbo.KolTov() AS ОбщееКоличествоПроданногоКокаКола;
--------------------------------------------------

БИЛЕТ 15

CREATE FUNCTION KolZak()
RETURNS TABLE
AS
RETURN
(
    SELECT 
        товары.Код_товара,
        товары.наименование,
        SUM(заказы.код_товара) AS ОбщееКоличествоЗаказов --вместо кодатовара должно быть количество но оно nchar
    FROM 
		товары LEFT JOIN заказы ON товары.Код_товара = заказы.код_товара
    WHERE 
        MONTH(заказы.дата_выполнения) = 4  -- Апрель
    GROUP BY товары.Код_товара, товары.наименование
);

SELECT * FROM KolZak();

--------------------------------------------------

БИЛЕТ 16

CREATE TRIGGER InsGr
ON группы
AFTER INSERT
AS
BEGIN
    PRINT 'Добавлена новая группа'
END;

--Проверка триггера
INSERT INTO группы (Код_группы, группа)
VALUES (12, 'Новая группа');

--------------------------------------------------

БИЛЕТ 17

CREATE TRIGGER DelDeti
ON дети
INSTEAD OF DELETE
AS
BEGIN
    PRINT 'Удалять нельзя!'
END;

--Проверка триггера
DELETE FROM дети WHERE Код_ребенка = 1;

--------------------------------------------------

БИЛЕТ 18

CREATE TABLE [dbo].[ТоварыИзменения] (
    [Код_товара] INT,
    [наименование] NVARCHAR(100),
    [группа] NVARCHAR(100),
    [единица] NVARCHAR(50),
    [вес] DECIMAL(18, 2),
    [цена] DECIMAL(18, 2),
    [количество] INT,
    [дата_изменения] DATETIME
);
CREATE TRIGGER UpTov
ON Товары
AFTER UPDATE
AS
BEGIN
    INSERT INTO ТоварыИзменения ([Код_товара], [наименование], [группа], [единица], [вес], [цена], [количество], [дата_изменения])
    SELECT 
        i.[Код_товара],
        i.[наименование],
        i.[группа],
        i.[единица],
        i.[вес],
        i.[цена],
        i.[количество],
        GETDATE() -- Получение текущей даты и времени
    FROM 
        inserted i; -- Используем таблицу inserted для получения измененных данных
END;

--Проверка триггера
UPDATE Товары
SET [цена] = [цена] * 1.1 -- Например, увеличение цены на 10%
WHERE Код_товара = 1;

--------------------------------------------------

БИЛЕТ 19

CREATE TRIGGER DelTel
ON Телефоны
INSTEAD OF DELETE
AS
BEGIN
    PRINT 'Удалять нельзя!'
END;

--Проверка триггера
DELETE FROM Телефоны WHERE Код_телефона = 1;

--------------------------------------------------

БИЛЕТ 20

-- 1. Определяем код условия найма для постоянной работы
DECLARE @PermanentCondition INT;
SELECT @PermanentCondition = Код_найма
FROM Найм
WHERE условие = 'постоянно';

-- 2. Обновляем условие найма для сотрудника Фролова
UPDATE Сотрудники
SET условие = @PermanentCondition
WHERE фамилия = 'Фролова'
  AND Имя = 'Вероника'
  AND Отчество = 'Станиславовна';

--------------------------------------------------

БИЛЕТ 21

CREATE TABLE [dbo].[ТоварыИзменения] (
    [Код_товара] INT,
    [наименование] NVARCHAR(100),
    [группа] NVARCHAR(100),
    [единица] NVARCHAR(50),
    [вес] DECIMAL(18, 2),
    [цена] DECIMAL(18, 2),
    [количество] INT,
    [дата_изменения] DATETIME
);
CREATE TRIGGER UpTov
ON Товары
AFTER UPDATE
AS
BEGIN
    INSERT INTO ТоварыИзменения ([Код_товара], [наименование], [группа], [единица], [вес], [цена], [количество], [дата_изменения])
    SELECT 
        i.[Код_товара],
        i.[наименование],
        i.[группа],
        i.[единица],
        i.[вес],
        i.[цена],
        i.[количество],
        GETDATE() -- Получение текущей даты и времени
    FROM 
        inserted i; -- Используем таблицу inserted для получения измененных данных
END;

--Проверка триггера
UPDATE Товары
SET [цена] = [цена] * 1.1 -- Например, увеличение цены на 10%
WHERE Код_товара = 1;

--------------------------------------------------

БИЛЕТ 22

INSERT INTO Товары (Код_товара, наименование, группа, единица, вес, цена, количество)
VALUES 
(21, 'печенье "Мария"', 5, 3, 0.1, 250, 35),
(22, 'кекс Клубничный', 5, 1, 0.2, 100, 12),
(23, 'Гринфилд', 1, 3, 0.25, 120, 80),
(24, 'Цитрусовый', 1, 3, 0.1, 110, 5);

--------------------------------------------------

БИЛЕТ 23

CREATE PROCEDURE ТоварыБанка
AS
BEGIN
    SET NOCOUNT ON;
    SELECT *
    FROM единицы
	JOIN товары ON единицы.Код_единицы = товары.единица
	WHERE единицы.единица LIKE '%банка%';
	END;

EXEC ТоварыБанка;
--------------------------------------------------

БИЛЕТ 24

CREATE FUNCTION dbo.СуммаЗаказов()
RETURNS DECIMAL(18, 2)
AS
BEGIN
    DECLARE @TotalSum DECIMAL(18, 2);
    DECLARE @ClientCode INT;
    DECLARE @CurrentYear INT = YEAR(GETDATE()); -- Получаем текущий год

    -- Получаем код клиента "ООО Рога и копыта"
    SELECT @ClientCode = Код_клиента 
    FROM Клиенты 
    WHERE Название = N'ООО "Рога и копыта"'; -- Используем N'строка' для корректной обработки Юникода

    -- Рассчитываем сумму всех заказов для клиента за март текущего года
    SELECT @TotalSum = ISNULL(SUM(заказы.количество * товары.цена), 0) -- Используем ISNULL, чтобы избежать ошибки если SUM вернёт NULL
    FROM заказы
    INNER JOIN товары ON заказы.код_товара = товары.Код_товара
    WHERE заказы.клиент = @ClientCode
      AND MONTH(заказы.дата_размещения_заказа) = 3 -- Март
      AND YEAR(заказы.дата_размещения_заказа) = @CurrentYear; -- Текущий год
    
    RETURN @TotalSum;
END;


SELECT dbo.СуммаЗаказов() AS TotalAmountForMarch;
DROP FUNCTION dbo.СуммаЗаказов;

--------------------------------------------------

БИЛЕТ 25

CREATE VIEW КоличествоЗаказовРогаКопыта AS
SELECT COUNT(Заказы.Код_заказа) AS Количество_заказов
FROM Заказы
JOIN Клиенты ON Заказы.клиент = Клиенты.Код_клиента
WHERE Клиенты.название = 'ООО "Рога и копыта"'
  AND YEAR(Заказы.дата_размещения_заказа) = YEAR(GETDATE());

--------------------------------------------------

БИЛЕТ 26

CREATE TRIGGER InsDety
ON Дети
AFTER INSERT
AS
BEGIN
    PRINT 'Добавлен новый элемент';
END;

INSERT INTO Дети (Код_ребенка, сотрудник, фамилия, имя, отчество, пол, дата_рожд)
VALUES ('10','5', 'Иванов', 'Иван', 'Иванович', 'М', '2023-01-01');

--------------------------------------------------

БИЛЕТ 27

UPDATE Клиенты
SET улица = 'Куйбышева', дом = '15'
WHERE название = 'ЗАО "Дебют"';

--------------------------------------------------

БИЛЕТ 28

DELETE FROM телефоны
WHERE телефон = '3812445230'
AND сотрудник = (
    SELECT Код_сотрудника
    FROM сотрудники
    WHERE фамилия = 'Иванов' 
    AND Имя = 'Иван' AND Отчество = 'Иванович'
);